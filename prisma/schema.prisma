datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    phone         String?
    city          city?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comment[]
    likes         Like[]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    refresh_token_expires_in Int?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        String    @id @default(cuid())
    content   String
    phone     String?
    city      String?
    images    String[]
    published Boolean   @default(false)
    author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    authorId  String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    comments  Comment[]
    likes     Like[]
}

model Comment {
    id        String   @id @default(cuid())
    message   String
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    authorId  String
    postId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Like {
    authorId String
    postId   String
    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id(name: "likeId", [postId, authorId])
}

enum city {
    tunis
    sousse
    sfax
    bizerte
    gafsa
    kef
    manouba
    medenine
    nabeul
    siliana
    jendouba
    kairouan
    kasserine
    mahdia
    monastir
    tataouine
    zaghouan
    ariana
    ben_arous
    gabes
    kebili
    tozeur
    sidi_bouzid
}
